// ------------------------------
// CONFIGURATION
// ------------------------------

const SHEET_URL = ''; // Leave blank to auto-create the sheet

// No editing below here, I mean feel free, but try not to break it, but if you do something cool, please let me know

const SEARCH_TERMS_TAB = 'Expensive_No_Conversions';
const NEGATIVE_LISTS_TAB = 'Negative_Keyword_Lists';
const INSTRUCTIONS_TAB = 'Instructions';
const DATE_CELL = 'D10';
const EXCLUDE_TEXT_CELL = 'D13';

function main() {
  const ss = SHEET_URL ? SpreadsheetApp.openByUrl(SHEET_URL) : SpreadsheetApp.create("Non-Converting Search Terms Report");
  if (!SHEET_URL) Logger.log("Sheet created: " + ss.getUrl());

  const dateRange = getSelectedDateRange(ss);
  const excludeTerms = getCampaignExclusionTerms(ss);
  const query = buildQuery(dateRange);

  const searchSheet = getOrCreateSheet(ss, SEARCH_TERMS_TAB);
  if (searchSheet.getLastRow() > 0) searchSheet.clearContents();

  const rows = AdsApp.search(query);
  const processed = processSearchTerms(rows, query, excludeTerms);

  const headers = [
    'Campaign Name', 'Ad Group Name', 'Keyword', 'Match Type', 'Search Term',
    'Impressions', 'Clicks', 'Cost ($)', 'Avg. CPC', 'CTR'
  ];
  searchSheet.getRange(1, 1, 1, headers.length).setValues([headers]);
  if (processed.length > 0) {
    searchSheet.getRange(2, 1, processed.length, headers.length).setValues(processed);
  }

  exportNegativeKeywordLists(ss);
}

function getSelectedDateRange(ss) {
  const sheet = ss.getSheetByName(INSTRUCTIONS_TAB);
  if (!sheet) return "LAST_30_DAYS";
  const val = sheet.getRange(DATE_CELL).getValue();
  const input = val.toString().trim();
  if (input === "7" || val === 7) return "LAST_7_DAYS";
  if (input === "14" || val === 14) return "LAST_14_DAYS";
  if (input === "30" || val === 30) return "LAST_30_DAYS";
  return "LAST_30_DAYS";
}

function getCampaignExclusionTerms(ss) {
  const sheet = ss.getSheetByName(INSTRUCTIONS_TAB);
  if (!sheet) return [];
  const val = sheet.getRange(EXCLUDE_TEXT_CELL).getValue();
  if (!val) return [];
  return val.toString().split(',').map(s => s.trim().toLowerCase()).filter(Boolean);
}

function buildQuery(dateRange) {
  return `
    SELECT
      campaign.name,
      ad_group.name,
      segments.keyword.info.text,
      segments.keyword.info.match_type,
      search_term_view.search_term,
      metrics.impressions,
      metrics.clicks,
      metrics.cost_micros,
      metrics.conversions
    FROM search_term_view
    WHERE metrics.conversions = 0
      AND campaign.advertising_channel_type = 'SEARCH'
      AND campaign.status IN ('ENABLED', 'PAUSED')
      AND segments.date DURING ${dateRange}
      AND metrics.clicks > 0  
    ORDER BY metrics.cost_micros DESC
  `;
}

function processSearchTerms(rows, query, excludeTerms) {
  const output = [];
  let loggedSample = false;

  while (rows.hasNext()) {
    try {
      const row = rows.next();
      if (!loggedSample) {
        Logger.log("Sample row structure: " + JSON.stringify(row));
        loggedSample = true;
      }

      const campaignName = row.campaign.name;
      const campaignNameNormalized = campaignName.toLowerCase();
      if (excludeTerms.some(term => campaignNameNormalized.includes(term))) {
        Logger.log("Excluded campaign: " + campaignName);
        continue;
      }

      const adGroupName = row.adGroup.name;
      const keywordText = row.segments.keyword.info.text;
      const matchType = row.segments.keyword.info.matchType;
      const searchTerm = row.searchTermView.searchTerm;

      const impressions = Number(row.metrics.impressions) || 0;
      const clicks = Number(row.metrics.clicks) || 0;
      const costMicros = Number(row.metrics.costMicros) || 0;
      const cost = costMicros / 1000000;

      const cpc = clicks > 0 ? cost / clicks : 0;
      const ctr = impressions > 0 ? clicks / impressions : 0;

      output.push([
        campaignName,
        adGroupName,
        keywordText,
        matchType,
        searchTerm,
        impressions,
        clicks,
        cost.toFixed(2),
        cpc.toFixed(2),
        (ctr * 100).toFixed(2) + '%'
      ]);
    } catch (err) {
      Logger.log("Error processing row: " + err);
    }
  }

  return output;
}

function exportNegativeKeywordLists(ss) {
  const sheet = getOrCreateSheet(ss, NEGATIVE_LISTS_TAB);
  if (sheet.getLastRow() > 0) sheet.clearContents();

  const headers = ['List Name', 'List ID'];
  const data = [];

  const negLists = AdsApp.negativeKeywordLists().get();
  while (negLists.hasNext()) {
    const list = negLists.next();
    const id = list.getResourceName().split('/').pop();
    data.push([list.getName(), id]);
  }

  sheet.getRange(1, 1, 1, headers.length).setValues([headers]);
  if (data.length > 0) {
    sheet.getRange(2, 1, data.length, headers.length).setValues(data);
  }
}

function getOrCreateSheet(ss, name) {
  let sheet = ss.getSheetByName(name);
  if (!sheet) {
    sheet = ss.insertSheet(name);
  }
  return sheet;
}
