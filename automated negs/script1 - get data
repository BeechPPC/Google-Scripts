// ------------------------------
// CONFIGURATION
// ------------------------------

const SHEET_URL = ''; // make copy of sheet 
const SEARCH_TERMS_TAB = 'Expensive_No_Conversions';
const NEGATIVE_LISTS_TAB = 'Negative_Keyword_Lists';
const DATE_RANGE = 'LAST_30_DAYS';
// ------------------------------
// GAQL QUERY: Search Terms with No Conversions
// ------------------------------

const QUERY = `
  SELECT
    campaign.name,
    ad_group.name,
    segments.keyword.info.text,
    segments.keyword.info.match_type,
    search_term_view.search_term,
    metrics.impressions,
    metrics.clicks,
    metrics.cost_micros,
    metrics.conversions
  FROM search_term_view
  WHERE metrics.conversions = 0
    AND campaign.advertising_channel_type = 'SEARCH'
    AND campaign.status IN ('ENABLED', 'PAUSED')
    AND segments.date DURING ${DATE_RANGE}
    AND metrics.clicks > 0
  ORDER BY metrics.cost_micros DESC
`;

function main() {
  // Open or create sheet
  let ss;
  if (!SHEET_URL) {
    ss = SpreadsheetApp.create("Non-Converting Search Terms Report");
    Logger.log("Sheet created: " + ss.getUrl());
  } else {
    ss = SpreadsheetApp.openByUrl(SHEET_URL);
  }

  // Clear old data and set up Search Terms tab
  let searchSheet = getOrCreateSheet(ss, SEARCH_TERMS_TAB);
  searchSheet.clearContents();

  // Run query and process
  let rows = AdsApp.search(QUERY);
  let processedRows = processSearchTerms(rows);

  const headers = [
    'Campaign Name', 'Ad Group Name', 'Keyword', 'Match Type', 'Search Term',
    'Impressions', 'Clicks', 'Cost ($)', 'Avg. CPC', 'CTR'
  ];
  searchSheet.getRange(1, 1, 1, headers.length).setValues([headers]);

  if (processedRows.length > 0) {
    searchSheet.getRange(2, 1, processedRows.length, headers.length).setValues(processedRows);
  }

  // Export negative keyword lists to separate tab
  exportNegativeKeywordLists(ss);
}

// ------------------------------
// PROCESS SEARCH TERM DATA
// ------------------------------

function processSearchTerms(rows) {
  const output = [];

  // Sample row structure log
  const sampleQuery = QUERY + ' LIMIT 1';
  const sample = AdsApp.search(sampleQuery);
  if (sample.hasNext()) {
    Logger.log("Sample row: " + JSON.stringify(sample.next()));
  }

  while (rows.hasNext()) {
    try {
      const row = rows.next();

      const campaignName = row.campaign.name;
      const adGroupName = row.adGroup.name;
      const keywordText = row.segments.keyword.info.text;
      const matchType = row.segments.keyword.info.matchType;
      const searchTerm = row.searchTermView.searchTerm;

      const impressions = Number(row.metrics.impressions) || 0;
      const clicks = Number(row.metrics.clicks) || 0;
      const costMicros = Number(row.metrics.costMicros) || 0;

      const cost = costMicros / 1000000;
      const cpc = clicks > 0 ? cost / clicks : 0;
      const ctr = impressions > 0 ? clicks / impressions : 0;

      output.push([
        campaignName,
        adGroupName,
        keywordText,
        matchType,
        searchTerm,
        impressions,
        clicks,
        cost.toFixed(2),
        cpc.toFixed(2),
        (ctr * 100).toFixed(2) + '%'
      ]);
    } catch (err) {
      Logger.log("Error processing row: " + err);
    }
  }

  return output;
}

// ------------------------------
// EXPORT NEGATIVE KEYWORD LISTS
// ------------------------------

function exportNegativeKeywordLists(ss) {
  const sheet = getOrCreateSheet(ss, NEGATIVE_LISTS_TAB);
  sheet.clearContents();

  const headers = ['List Name', 'List ID'];
  const data = [];

  const negLists = AdsApp.negativeKeywordLists().get();
  while (negLists.hasNext()) {
    const list = negLists.next();
    const fullResourceName = list.getResourceName(); // e.g. customers/1234567890/negativeKeywordLists/456
    const id = fullResourceName.split('/').pop(); // Extracts just "456"

    data.push([
      list.getName(),
      id
    ]);
  }

  sheet.getRange(1, 1, 1, headers.length).setValues([headers]);
  if (data.length > 0) {
    sheet.getRange(2, 1, data.length, headers.length).setValues(data);
  }
}

// ------------------------------
// HELPER: Create Tab If Not Exists
// ------------------------------

function getOrCreateSheet(ss, name) {
  let sheet = ss.getSheetByName(name);
  if (!sheet) {
    sheet = ss.insertSheet(name);
  }
  return sheet;
}
